@misc{decaf,
      author = {Mike Hamburg},
      title = {Decaf: Eliminating cofactors through point compression},
      howpublished = {Cryptology {ePrint} Archive, Paper 2015/673},
      year = {2015},
      url = {https://eprint.iacr.org/2015/673}
}
@InProceedings{elgamal,
author="ElGamal, Taher",
editor="Blakley, George Robert
and Chaum, David",
title="A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms",
booktitle="Advances in Cryptology",
year="1985",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="10--18",
abstract="A new signature scheme is proposed together with an implementation of the Diffie - Hellman key distribution scheme that achieves a public key cryptosystem. The security of both systems relies on the difficulty of computing discrete logarithms over finite fields.",
isbn="978-3-540-39568-3"
}

@article{zk,
    author = {Goldwasser, Shafi and Micali, Silvio and Rackoff, Charles},
    title = {The Knowledge Complexity of Interactive Proof Systems},
    journal = {SIAM Journal on Computing},
    volume = {18},
    number = {1},
    pages = {186-208},
    year = {1989},
    doi = {10.1137/0218012},
    URL = { https://doi.org/10.1137/0218012 },
    eprint = { https://doi.org/10.1137/0218012 },
    abstract = { Usually, a proof of a theorem contains more knowledge than the mere fact that the theorem is true. For instance, to prove that a graph is Hamiltonian it suffices to exhibit a Hamiltonian tour in it; however, this seems to contain more knowledge than the single bit Hamiltonian/non-Hamiltonian.In this paper a computational complexity theory of the “knowledge” contained in a proof is developed. Zero-knowledge proofs are defined as those proofs that convey no additional knowledge other than the correctness of the proposition in question. Examples of zero-knowledge proof systems are given for the languages of quadratic residuosity and 'quadratic nonresiduosity. These are the first examples of zero-knowledge proofs for languages not known to be efficiently recognizable. }
}

@electronic{egrust,
        author = {McMurtry, Eleaor},
        title = "\textit{ElGamal Rust} {[Online]}",
        year = {2020},
        howpublished={Avaliable: \url{https://docs.rs/rust-elgamal/latest/rust_elgamal/}},
}
@electronic{repo,
        author = {Bulut, Ahmet Ercem},
        title = "\textit{ElGamal Shuffle Codebase} {[Online]}",
        year = {2024},
        howpublished={Avaliable: \url{https://github.com/ercembu/elgamal-shuffle}},
}
@electronic{rust,
        author = {Klabnik, Steve and Nichols, Carol, with contributions from the Rust Community},
        title = "\textit{The Rust Programming Language Book} {[Online]}",
        year = {2024},
        howpublished={Avaliable: \url{https://doc.rust-lang.org/book/}},
}

@electronic{dalek:curve,
  author = {Dalek Cryptography},
  title = "\textit{curve25519-dalek A pure-Rust implementation of group operations on Ristretto and Curve25519.} {[Online]}",
  year = {2024},
  howpublished={Available: \url{https://docs.rs/curve25519-dalek/latest/curve25519_dalek/}},
}
@electronic{mentalpoker,
  author = {Mohnblatt, Nicolas and Gurkan, Kobi and Novakovic, Andrija
 		and Chen, Charlie },
  title = "\textit{Mental Poker. A library for mental poker (and other card games). Based on the Barnett-Smart protocol and the Bayer-Groth argument of correct shuffle.} {[Online]}",
  year = {2022},
  howpublished={Available: \url{https://github.com/geometryxyz/mental-poker}},
}

@electronic{bgmixnet,
  author = {Fragkoulis, Marios and Tyagi, Nirvan},
  title = "\textit{Bayer Groth Mixnet Implementation in C++} {[Online]}",
  year = {2018},
  howpublished={Available: \url{https://github.com/grnet/bg-mixnet}},
}

@electronic{arkworks,
  author = {arkworks contributors},
  title = "\textit{arkworks zkSNARK ecosystem}",
  howpublished={Available: \url{https://arkworks.rs}},
  year = {2022},
}


@InProceedings{bgshuffle,
author="Bayer, Stephanie and Groth, Jens",
editor="Pointcheval, David and Johansson, Thomas",
title="Efficient Zero-Knowledge Argument for Correctness of a Shuffle",
booktitle="Advances in Cryptology -- EUROCRYPT 2012",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="263--280",
abstract="Mix-nets are used in e-voting schemes and other applications that require anonymity. Shuffles of homomorphic encryptions are often used in the construction of mix-nets. A shuffle permutes and re-encrypts a set of ciphertexts, but as the plaintexts are encrypted it is not possible to verify directly whether the shuffle operation was done correctly or not. Therefore, to prove the correctness of a shuffle it is often necessary to use zero-knowledge arguments.",
isbn="978-3-642-29011-4"
}

@inproceedings{Barnett,
  title={Mental Poker Revisited},
  author={Adam Barnett and Nigel P. Smart},
  booktitle={IMA Conference on Cryptography and Coding},
  year={2003},
  url={https://api.semanticscholar.org/CorpusID:27461759}
}
